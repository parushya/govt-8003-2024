[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lab for Quantitative Methods - 3",
    "section": "",
    "text": "Why are we here?\n\nThis web book is meant to be one stop-resource for course related labs and some interesting stuff. The detailed course material is available on the Canvas Page.\nYou can find here all the code, links to replication data, and notes from the lab session. We will be using R for all the analysis work in this course.\nI will update the session wise pages as we go through them.\nEveryone should have the following on their systems:\n\nR - Statistical Programming Language.\nRStudio - Interactive Development Environment for R.\n\\(\\LaTeX\\) (pronounced “LAY-tek” or “LAH-Tek) Typesetting tool for preparing high-quality professional documents.\n\nYou can check the installation of \\(\\LaTeX\\) for R by following the instructions here.\nIt would be useful if you are familiar with tidyverse framework. If not, or if you need a refresher, the online book here by Hadley Wickham is a great resource.\nIf you are fairly confident, the amazing song below is nevertheless a good recall heuristic!",
    "crumbs": [
      "Why are we here?"
    ]
  },
  {
    "objectID": "latex-quarto.html",
    "href": "latex-quarto.html",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "",
    "text": "Today’s Lab",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#todays-lab",
    "href": "latex-quarto.html#todays-lab",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "",
    "text": "Good Coding\n\\(\\LaTeX\\)\nQuarto\n\n\nYAML\nCode Chunks\nMarkdown text\n\n\nR Projects\n\n\nhere package\n\n\nFolder Structure",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#good-coding",
    "href": "latex-quarto.html#good-coding",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "Good Coding",
    "text": "Good Coding\nGood programming or coding is closely related to the idea of Literate statistical programming. As Donald Knuth (1984) defines, it is a way to write programs that focuses on explaining to human readers what we want the computers to do, rather than just instructing the computers to do so.\nStatitsical Programming , hence, is about formalizing your thinking about how you treat the data and using functional programming to automate such formalized tasks to be done repetitively. It improves efficiency, enhances reproducibility, and boosts creativity when it comes to finding new patterns in your data.\nGuidelines for data and statistical analyses:1\n\nAccuracy: Write a code that reduces the chances of making an error and lets you catch one if it occurs.\nEfficiency: If you are doing it twice, see the pattern of your decision-making and formalize it in your code. Difference between Excel and coding\nReplicate-and-Reproduce: Ability to repeat the computational process which reflects your thinking and decisions that you took along the way. Improves transparency and forces one to be deliberate and responsible about choices during analyses.\n\nHuman Interpretability: Writing code is not just about analyzing but allowing yourself and then others to be able to understand your analytic choices.\n\nPublic Good: Research is a public good. And the code allows your research to be truly accessible. This means you write a code that anyone else who understands the language can read, reuse, and recreate without you being present. We essentially ensure that by writing a readable and ideally publicly accessible code.\n\nFurther, writing good code could also benefit from some common guidelines used across coders. A good starting point is the tidyverse style guide.",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#latex",
    "href": "latex-quarto.html#latex",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "\\(\\LaTeX\\)",
    "text": "\\(\\LaTeX\\)\n\\(\\LaTeX\\) (pronounced “LAY-tek” or “LAH-Tek) is a typesetting tool for preparing high-quality professional documents. It is the preferred typesetting tool used in high-end scientific documentation task. It gives you superior control over how your document look like, has enhanced capabilities to write technical specifications (Maths, stats, proofs, etc.), include code, and produces readily editable back-end documents.\nIt is not a word-processing tool. It is a simple tool without too many priors about how the document should look like.\nThere are many interfaces that allow you to work with \\(\\LaTeX\\). Overleaf is a widely used online platform and Texmaker is a popular offline application.\nHowever, RStudio has in-built capability to double as a \\(\\LaTeX\\) editor. Previously RMarkdown and now Quarto have capabilities that you can harness to achieve professional and beautifully typeset documents.\nThink of writing an equation like:\n\\[\nViolence_{i,j} = \\beta_0 + \\beta_1EthnicFractionalization_i + \\gamma_j + \\epsilon_i\n\\] In Latex, using quarto, you have to write something like the following:\n$Violence_{i,j} = \\\\beta_0 + \\\\beta_1EthnicFractionalization_i + \\\\gamma_j + \\\\epsilon_i$\nFor a single line of text we encapsulate code by $ sign.\nFor multi-line code we use $$.\nRead more about \\(\\LaTeX\\) here\nThe box folder has some detailed resources for helping with typesetting in \\(\\LaTeX\\).\n\n\n\n\n\n\nTo Do\nFollow these instructions to install library(tinytex).\n\n\n\nThis can also happen, btw!",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#quarto",
    "href": "latex-quarto.html#quarto",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "Quarto",
    "text": "Quarto\nQuarto is a literate statistical programming tool.\nQuarto can include code from not just R, but also Python, Julia, Stata and many other languages/tools.\nQuarto allows you to include the good coding guidelines that we discussed above. It provides you with capability to write code and perform data analysis using R, write text that is part of any professional communication, and include mathematical symbols and equations in a well typeset format. Essentially, it allows you to work on a manuscript with data analysis at one place.\nHere is some cool stuff that you can do with quarto.\n\n\n\n\n\n\nExercise 1\n\nOpen a new quarto document by File &gt; New File &gt; Quarto Document.\nUse Render button on top on scripts panel to save and get a .pdf output.\n\n\n\n\nA Quarto document is saved as a .qmd file. You can edit this file in two ways: Programmatically by being in source button and visually by choosing the Visual button, both button on top left corner of the .qmd window. More details about workign with Quarto can be found on the quarto website here.\nThere are three building blocks in a .qmd file:\n\n\nYAML\nShort for Yet-Another-Markup-Languge\nThis is the part we see sandwiched between two --- at the strat of .qmd file. Here we define different global settings for the particular document.\nCurrently, we see\n---\ntitle: \"Untitled\"\nformat: html\n---\nWe can add many more options here to modify the details to appear at the start of the document. Here’s an example from quarto reference site\n\n\n\n\n\n\n---\ntitle: \"Toward a Unified Theory of High-Energy Metaphysics\"\ndate: 2008-02-29\nauthor:\n  - name: Josiah Carberry\n    id: jc\n    orcid: 0000-0002-1825-0097\n    email: josiah@psychoceramics.org\n    affiliation: \n      - name: Brown University\n        city: Providence\n        state: RI\n        url: www.brown.edu\nabstract: &gt; \n  The characteristic theme of the works of Stone is \n  the bridge between culture and society. ...\nkeywords:\n  - Metaphysics\n  - String Theory\nlicense: \"CC BY\"\ncopyright: \n  holder: Josiah Carberry\n  year: 2008\ncitation: \n  container-title: Journal of Psychoceramics\n  volume: 1\n  issue: 1\n  doi: 10.5555/12345678\nfunding: \"The author received no specific funding for this work.\"\n---\n\n\n\nOr, global settings for different formats of outputs like\n\n\n\n\n\n\n---\ntitle: \"My Document\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 6\n  pdf:\n    fig-width: 7\n    fig-height: 5\n---\n\n\n\n\n\nCode Chunks\nYou can start a new R code chunk by pressing cmd + option + I or ctrl + alt + I.\nYou can also do this with the Insert button icon in the editor toolbar or by manually typing the chunk delimiters ```{r} and ```.\nTry to use the keyboard shortcut more often as it will save you a ton of time later.\nR code chunks are surrounded by ```{r} and ```.\nYou can run each code chunk by clicking the Run icon (it looks like a play button at the top of the chunk), or by pressing Cmd/Ctrl + Shift + Enter.\n#| eval: true # Do evaluate this chunk\n#| echo: true # Do show this chunk in the final rendered document\n#| output: true # Do show the output / results of this chunk in the rendered document\n\nprint(\"Dont run this code\")\nRStudio executes the code and displays the results below the code.\nIf you don’t like seeing your plots and output in your document and would rather make use of RStudio’s Console and Plot panes, you can click on the gear icon next to “Render” and switch to “Chunk Output in Console”.\nA chunk should be relatively self-contained, and focused around a single task.\n\n\n\n\n\n\nExercise\n\nAdd a code chunk at the bottom of the .qmd file you created.\nAdd some simple mathematical operations.\nRun the code chunk separately, and then the whole file by pressing Render button from the top.\n\n\n\n\nCode chunk options are included in a special comment at the top of the block (lines at the top prefaced with #| are considered options). More on code chunk options here\nOptions available for customizing output include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\necho\nInclude the source code in output\n\n\noutput\nInclude the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quarto’s standard enclosing markdown).\n\n\nwarning\nInclude warnings in the output.\n\n\nerror\nInclude errors in the output (note that this implies that errors executing code will not halt processing of the document).\n\n\ninclude\nCatch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n\n\n\nYou can also add these options as global options in the YAML by writing them under execute option like:\n---\nexecute: \n  echo: true\n  inlcude: false\n---\nThe following table summarizes which types of output each option suppresses:2\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nRun code\nShow code\nOutput\nPlots\nMessages\nWarnings\n\n\n\n\neval: false\nX\n\nX\nX\nX\nX\n\n\ninclude: false\n\nX\nX\nX\nX\nX\n\n\necho: false\n\nX\n\n\n\n\n\n\nresults: hide\n\n\nX\n\n\n\n\n\nfig-show: hide\n\n\n\nX\n\n\n\n\nmessage: false\n\n\n\n\nX\n\n\n\nwarning: false\n\n\n\n\n\nX\n\n\n\n\nInline code\nWe can also embed R code into a Quarto document: directly into the text, with: ```{r} &lt;code&gt; ```.\nFor example: ```{r} (2+2)```.\n\n\n\nMarkdown Text\nMarkdown text is like any other text just with some special considerations.\nYou can see the help section from R to see some of the basic formatting tips.\n\n\n\nR Markdown Help\n\n\n\n\n\n\n\n\nThese are some of the regularly used formatting options in RMarkdown/Quarto Titles and subtitles ————————————————————\n# Title 1\n\n## Title 2\n\n### Title 3\n\n\nText formatting \n------------------------------------------------------------\n\n*italic*  \n\n**bold**   \n\n`code`\n\nLists\n------------------------------------------------------------\n\n* Bulleted list item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n\n1. Item 1\n2. Item 2\n\nLinks and images\n------------------------------------------------------------\n\n\n\n\n\n\n\n\n\nPractice\nLet’s try all that we learnt\n\nExercise\n\nDelete the existing code, except yaml on top, in the .qmd file that we created today.\nAdd some simple mathematical operations like addition, subtraction, or mutliplication. Now, in the chunk set the options differently. You could play with different options that we learnt above and their values. Use &lt;TAB&gt; button to see different values that you can provide to chunk options.\n\n```{r}\n#| echo: true\n#| output: asis\n\n1 + 1\n```\n[1] 2\n\nAdd two separate R chunks. In one, load the datset from the paper that you want to replicate. In second, add a simple select or filter functionality.\n\n```{r}\n#| echo: false \n#| message: false\n#| warning: false\n\n# Loading packages\nlibrary(tidyverse) # For tidyverse\nlibrary(janitor) # For Janitor\n\n# Loading Dataset\nvdem_df &lt;- readRDS(\"Datasets-mathcamp/V-Dem-CY-Full+Others-v12.rds\") %&gt;% \nclean_names() \n\n# ` %&gt;% ` is the piping operator from tidyverse universe\n\n# `clean_names` cleans the names of columns and standardizes them | from Janitor package\n```\n```{r}\n#| echo: false  # Toggle with options as well the paramters like true/false etc\n#| message: false\n#| warning: false\nvdem_2021 &lt;- vdem_df %&gt;% \n  filter(year == 2021) %&gt;%  # To filter values according to one variable\n  select(year, country_name, v2x_libdem, e_gdppc, e_pop) # To select particular variables\n```\n\nWrite the model specification that is mentioned in your paper in \\(\\LaTeX\\) in your quarto document. An example is given below. You can use the resources on latex from course Canvas page.\n\n\nModel EquationModel Latex Code\n\n\n\\(LiberalDemocracy_i = \\alpha + \\beta_1GDPpc_i + epislon_i\\)\n\n\n$LiberalDemocracy_i = \\alpha + \\beta_1GDPpc_i + epislon_i$\n\n\n\n\n\nRender the whole document into a .pdf with your name in the YAML and today’s date. You may use the following YAML with modifications.\n\n\n\n\n\n\nBelow is a yaml that you can use in your assignments and documents with modifications.\n---\ntitle: My First Latex Document\nsubtitle: Govt 8003\nauthor: &lt;Your Name&gt;\ndate: today\nformat:\n  pdf:\n    highlight-style: kate\n    citation_package: natbib\n  docx: default\nalways_allow_html: true\ngeometry: margin=1.2in\nfontsize: 12pt\nlinestretch: 1.5\nlinkcolor: blue\ntoc: true\nlink-citations: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  fig-height: 6\n  fig-width: 8.5\n  fig-pos: \"!t\"\nkeep_tex: true\nwhitespace: small\n---\nIf you think your thought is not making sense, write it in \\(\\LaTeX\\),\nIt will at least not make sense in a beautiful way.\n-Buddha (500 B.C.E.)",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#exercise",
    "href": "latex-quarto.html#exercise",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "Exercise",
    "text": "Exercise\n\nDelete the existing code, except yaml on top, in the .qmd file that we created today.\nAdd some simple mathematical operations like addition, subtraction, or mutliplication. Now, in the chunk set the options differently. You could play with different options that we learnt above and their values. Use &lt;TAB&gt; button to see different values that you can provide to chunk options.\n\n```{r}\n#| echo: true\n#| output: asis\n\n1 + 1\n```\n[1] 2\n\nAdd two separate R chunks. In one, load the datset from the paper that you want to replicate. In second, add a simple select or filter functionality.\n\n```{r}\n#| echo: false \n#| message: false\n#| warning: false\n\n# Loading packages\nlibrary(tidyverse) # For tidyverse\nlibrary(janitor) # For Janitor\n\n# Loading Dataset\nvdem_df &lt;- readRDS(\"Datasets-mathcamp/V-Dem-CY-Full+Others-v12.rds\") %&gt;% \nclean_names() \n\n# ` %&gt;% ` is the piping operator from tidyverse universe\n\n# `clean_names` cleans the names of columns and standardizes them | from Janitor package\n```\n```{r}\n#| echo: false  # Toggle with options as well the paramters like true/false etc\n#| message: false\n#| warning: false\nvdem_2021 &lt;- vdem_df %&gt;% \n  filter(year == 2021) %&gt;%  # To filter values according to one variable\n  select(year, country_name, v2x_libdem, e_gdppc, e_pop) # To select particular variables\n```\n\nWrite the model specification that is mentioned in your paper in \\(\\LaTeX\\) in your quarto document. An example is given below. You can use the resources on latex from course Canvas page.\n\n\nModel EquationModel Latex Code\n\n\n\\(LiberalDemocracy_i = \\alpha + \\beta_1GDPpc_i + epislon_i\\)\n\n\n$LiberalDemocracy_i = \\alpha + \\beta_1GDPpc_i + epislon_i$\n\n\n\n\n\nRender the whole document into a .pdf with your name in the YAML and today’s date. You may use the following YAML with modifications.",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#r-projects",
    "href": "latex-quarto.html#r-projects",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "R Projects",
    "text": "R Projects\nWe used the setwd() command till now to trace the files we need in our work. As your work expands, projects will have multiple datasets to be loaded, different subsidiary scripts to be used, and multiple outputs to be saved.\nA first order problem related to both file management and reproducability of code is the usage of file paths. Using absolute paths, like ~/User/MyName/Documents/..... becomes cumbersome and also inhibits efficiency of reproducability. Every time someone else runs the script, they will have to change the file paths in all the instances in Rscripts or .qmd file to locate the related datasets as well as other objects. Similarly, there would be issues with saving objects in new places. A partially efficient way we used till now involved using setwd() to direct R to a new working directory; this is also called usage of relative paths\nR Projects is a built-in mechanism in RStudio for seamless file management and usage of relative paths.\nLet’s start by creating a new project. Click File &gt; New Project. Name the new project govt-8003.\n\n\n\n\n\n\n\n\nFigure 1: To create new project: (top) first click New Directory, then (middle) click New Project, then (bottom) fill in the directory (project) name, choose a good subdirectory for its home and click Create Project. source\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\nClose the new project just created\nGo to the folder on your system, and click the .RProj file.\nStart a new qmd file like we did before. Delete existing code except for YAML. Run getwd() command in console and see the difference.\nStart a new R code chunk (cmd + option + I) and load replication dataset. Notice the change in behavior when you press TAB inside the quotes for selecting path.\n\n\n\n\n\nhere package\nAn efficient file and folder management system is going to be crucial as we move into working with serious projects. As stressed earlier, keeping and using all the files associated with a project in a comprehensible folder system is facilitated by R Projects. You would ideally want to create your own template for folder management that you follow across projects. For starters, the folder structure below is the one created for your data essay assignment in Govt 8001 or Quant 1.\nYou can use the point-and-click functionality in your computers to create this structure. Later today, we will briefly go through an R script that do this programmatically.\n📦 govt-8003\n├─ govt-8003.RProj\n├─ 000-setup.R\n├─ 001-eda.qmd\n├─ 002-analysis.qmd\n└─ 003-manuscript.qmd\n├─ Data\n│  ├─ Raw\n│  │  ├─ Dataset1\n│  │  │  ├─ dataset1.csv\n│  │  │  └─ codebook-dataset1.pdf\n│  │  └─ Dataset2\n│  │     ├─ ...dta\n│  │     └─ codebook-dataset2.pdf\n│  └─ Clean\n│     └─ Merged-df1-df2.csv\n├─ Scripts\n│  ├─ R-scripts\n│  │  ├─ plotting-some-variable.R\n│  │  └─ exploring-different-models.R\n│  ├─ Stata-Scripts\n│  │  └─ seeing-variable-labels.do\n│  └─ Python-Scripts\n│     └─ scraping-data-from-website.py\n└─ Outputs\n   ├─ Plots\n   │  ├─ ...jpeg\n   │  └─ ...png\n   ├─ Tables\n   │  └─ .csv\n   └─ Text\n      └─ ...txt\nSuggested folder structure for a new academic project\nWhile we learnt how to create or associate an .RProj with a folder, integrating it with here() function from the here package, makes things further smoother. Let’s do it with the following exercise.\n\n\n\n\n\n\nExercise\n\nGo the RStudio window with govt-8003 project. Check the extreme upper left corner to see if you are in the correct window.\nIn the qmd file we were working in, add an R chunk.\nLoad the library here with the following code. Run the code line by line\n\n\nlibrary(here)\n\n\n # See the output for each of the following lines | Use your own datasets\nhere()\n\n# Make modification here after copying your dataset to this folder\n\nhere(\"Datasets-mathcamp\",\"V-Dem-CY-Full+Others-v12.rds\")\n\n# syntax is\n\n# here(\"First subfolder from the root folder\", \"second subfolder\",...., \"file\")\n\n\nvdem_new &lt;- readRDS(here(\"Datasets-mathcamp\",\"V-Dem-CY-Full+Others-v12.rds\"))\n\nThis is a cleaner syntax which when coupled with usage of R projects saves time in typing file paths and avoids issues when the project is run on some other computer system.\nNote: here() always notes the path from the main folder or the root directory where your .RProj file is located.\nSave the files and close the govt-8003 project window\n\n\n\nMake it a habit of using R Projects and here() function in your scripts for writing portable code.\nYou can read this quick and informative blogpost on using these two here.",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#folder-structure",
    "href": "latex-quarto.html#folder-structure",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "Folder Structure",
    "text": "Folder Structure\nWe ideally want a folder structure that is easily understandable to us and others.\n📦 govt-8003\n├─ govt-8003.RProj\n├─ 000-setup.R\n├─ 001-eda.qmd\n├─ 002-analysis.qmd\n└─ 003-manuscript.qmd\n├─ Data\n│  ├─ Raw\n│  │  ├─ Dataset1\n│  │  │  ├─ dataset1.csv\n│  │  │  └─ codebook-dataset1.pdf\n│  │  └─ Dataset2\n│  │     ├─ ...dta\n│  │     └─ codebook-dataset2.pdf\n│  └─ Clean\n│     └─ Merged-df1-df2.csv\n├─ Scripts\n│  ├─ R-scripts\n│  │  ├─ plotting-some-variable.R\n│  │  └─ exploring-different-models.R\n│  ├─ Stata-Scripts\n│  │  └─ seeing-variable-labels.do\n│  └─ Python-Scripts\n│     └─ scraping-data-from-website.py\n└─ Outputs\n   ├─ Plots\n   │  ├─ ...jpeg\n   │  └─ ...png\n   ├─ Tables\n   │  └─ .csv\n   └─ Text\n      └─ ...txt\nWe can create this structure by using point and click system on our laptops. But since we might want to use the same folder structure repetitively it will make sense to be lazy and do it programmatically.\n\n\n\n\n\n\nExercise\n\nDownload the 000-setup.R from here\nPlace it in the govt-8003 folder.\nOpen it in the opened RStudio window.\n\n```{r}\n# Name: 000-setup.R\n# Author: Parushya\n# Purpose: Creates main folders, subfolders in the main project directory\n# Will also ensure that you have basic packages required to run the repository\n# Date Created: 2020/10/07\n\n\n\n# Checking if packages are installed and installing\n\n\n# check.packages function: install and load multiple R packages.\n# Found this function here: https://gist.github.com/smithdanielle/9913897 on 2019/06/17\n# Check to see if packages are installed. Install them if they are not, then load them into the R session.\n\ncheck.packages &lt;- function(pkg) {\n  new.pkg &lt;- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) {\n    install.packages(new.pkg, dependencies = TRUE)\n  }\n  sapply(pkg, require, character.only = TRUE)\n}\n\n# Check if packages are installed and loaded:\npackages &lt;- c(\"janitor\",  \"tidyverse\", \"utils\", \"here\")\ncheck.packages(packages)\n\n\n# Setting Directories and creating subfolders\n\n\n# Creating Sub Folders\n\n## Data\ndir.create(file.path(paste0(here(\"Data\")))) # Data Folder\ndir.create(file.path(paste0(here(\"Data\",\"Raw\")))) # Raw Data sub-folder\ndir.create(file.path(paste0(here(\"Data\",\"Clean\")))) # Clean Data sub-folder\n\n\n# Scripts\ndir.create(file.path(paste0(here(\"Scripts\")))) # Scripts Folder\ndir.create(file.path(paste0(here(\"Scripts\",\"RScripts\")))) # RScripts  sub-folder\ndir.create(file.path(paste0(here(\"Scripts\",\"Stata-Scripts\")))) # Stata Scripts sub-folder\ndir.create(file.path(paste0(here(\"Scripts\",\"Python-Scripts\")))) # Python Scripts sub-folder\n\n\n# Output\ndir.create(file.path(paste0(here(\"Outputs\")))) # Outputs Folder\ndir.create(file.path(paste0(here(\"Outputs\",\"figures\")))) # Figures sub-folder\ndir.create(file.path(paste0(here(\"Outputs\",\"tables\")))) # Tables sub-folder\ndir.create(file.path(paste0(here(\"Outputs\",\"text\")))) # Text sub-folder\n\n```\n\nRun the file line-by-line. See the folder structure created in your main folder.",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#plan-concept-of-a-plan",
    "href": "latex-quarto.html#plan-concept-of-a-plan",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "Plan Concept of a Plan",
    "text": "Plan Concept of a Plan\nHere’s a quick workflow for starting a new project or assignment or paper.\n\nCreate a new Rstudio Project by clicking File &gt; New Project. Name it govt-&lt;coursecode&gt;-&lt;project.\nCheck if now your RStudio Window shows the project name on top right corner. If not, go to folder and double-click the .RProj file.\nPaste the 000-setup.R file in the main project folder. Open it in the same Rstudio window with the project and run the complete file. Your folder structure is created.\nCopy your raw data in Data/Raw folder. Similarly, your scripts in Scripts/RScripts folder\nStart your new .qmd file and save it in the main folder.\nRemember to use here() package extensively in both, scripts and quarto file, when loading or saving the data.\nYou can always zip the whole project folder for sharing. The receiver will just need to unzip and run the code after starting the associated .RProj file, without changing file paths on their computer.",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "latex-quarto.html#footnotes",
    "href": "latex-quarto.html#footnotes",
    "title": "Session 1 - \\(\\LaTeX\\) and Quarto",
    "section": "",
    "text": "Inspired by the summary provided by Prof Aaron Williams’ course on Data Analysis offered at McCourt School. Strongly recommended to learn good coding using R↩︎\nThis section is copied from R4DS book↩︎",
    "crumbs": [
      "Session 1 - $\\LaTeX$ and Quarto"
    ]
  }
]